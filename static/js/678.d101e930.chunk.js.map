{"version":3,"file":"static/js/678.d101e930.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","webpack://goit-react-hw-08-phonebook/./src/components/sortedBtn/sortedBtn.module.css?cf9b","components/sortedBtn/sortedBtn.jsx","redux/contact/selector.js","webpack://goit-react-hw-08-phonebook/./src/components/UpdateForm/UpdateForm.module.css?0676","components/UpdateForm/UpdateForm.jsx","components/ModalWindow/ModalWindow.jsx","components/ContactList/ContactList.jsx","hooks/useContact.js","webpack://goit-react-hw-08-phonebook/./src/components/Form/Form.module.css?89ba","components/Form/Form.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","redux/filter/selector.js","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/pages/Contacts.module.css?8552","pages/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactContainer\":\"ContactList_contactContainer__L+mXg\",\"contactItem\":\"ContactList_contactItem__ppNQ5\",\"contactsTitle\":\"ContactList_contactsTitle__gHlpa\"};","// extracted by mini-css-extract-plugin\nexport default {\"sortBtn\":\"sortedBtn_sortBtn__T7+Yd\",\"button\":\"sortedBtn_button__yS6BE\"};","import { useDispatch } from 'react-redux';\nimport { sortByName, sortByAdded } from '../../redux/contact/contactSlice';\n\nimport css from './sortedBtn.module.css';\n\n  import { TbAB2, Tb24Hours } from \"react-icons/tb\";\nconst SortedBtns = () => {\n  const dispatch = useDispatch();\n    // const { sortedAlphabetic } = UseContact();\n    // const { recentlyAdded } = UseContact();\n\n  return (\n    <div>\n      <button className={css.sortBtn} onClick={() => dispatch(sortByName())}>\n        Sorted by   <TbAB2 />\n        \n        {/* {sortedAlphabetic ? (\n          <TbSortDescendingLetters size=\"20\" />\n        ) : (\n          <TbSortAscendingLetters size=\"20\" />\n        )} */}\n      </button>\n      <button className={css.sortBtn} onClick={() => dispatch(sortByAdded())}>\n        Sorted by <Tb24Hours/>\n      </button>\n    </div>\n  );\n};\nexport default SortedBtns;\n","import { createSelector } from \"reselect\";\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectError = state => state.contacts.error;\nexport const selectIsLoader = state => state.contacts.isLoader;\nexport const selectSortedAlphabetic = state => state.contacts.sortedAlphabetic;\nexport const selectRecentlyAdded = state => state.contacts.recentlyAdded;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n    [selectContacts, selectFilter],\n      (contacts, filterValue) => {\n      const filtredContacts = contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filterValue.toLowerCase())\n      );\n      return filtredContacts;\n    }\n  );","// extracted by mini-css-extract-plugin\nexport default {\"modalForm\":\"UpdateForm_modalForm__o8x6r\",\"label\":\"UpdateForm_label__VBNc7\",\"modalInput\":\"UpdateForm_modalInput__AUWFj\",\"modalSubmitBtn\":\"UpdateForm_modalSubmitBtn__5H1-x\",\"modalCloseBtn\":\"UpdateForm_modalCloseBtn__L3t-g\"};","import { useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { selectContacts } from \"redux/contact/selector\"\nimport { updateContact } from \"redux/operations\"\nimport { nanoid } from \"nanoid\"\nimport css from './UpdateForm.module.css'\n\nconst UpdateForm=({onClose, contactId})=>{\n    const dispatch=useDispatch()\n    const contacts= useSelector(selectContacts)\n    const currentContact = contacts.find(el => el.id === contactId);\n\n  const [newName, setNewName] = useState(currentContact.name);\n  const [newNumber, setNewNumber] = useState(currentContact.number);\n    const handleChangeName=e=>{\n        setNewName(e.currentTarget.value)\n    }\n    const handleChangeNumber=e=>{\n        setNewNumber(e.currentTarget.value)\n    }\n\n    const handleClose=()=>onClose()\n    const handleSubmit=e=>{\n        e.preventDefault()\n        const contact = {\n            name: newName,\n            number: newNumber,\n          };\n      \n        dispatch(updateContact({contact, contactId}))\n        handleClose()\n    }\n    const nameInputId = nanoid(5);\n    const numberInputId = nanoid(5);\n  \n    return( <div className={css.overley}>\n        <div className={css.modal}>\n          <form className={css.modalForm} onSubmit={handleSubmit} >\n            <button className={css.modalCloseBtn} type=\"button\" onClick={handleClose}>\n              X\n            </button>\n            <label htmlFor={nameInputId} className={css.label}>  <input className={css.modalInput}\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              placeholder=\"Name\"\n              value={newName}\n          id={nameInputId}\n          onChange={handleChangeName}\n              \n              /></label>\n             \n             <label htmlFor={numberInputId}>  <input className={css.modalInput}\n             type=\"tel\"\n             name=\"number\"\n             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n             title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n             required\n             placeholder=\"Number\"\n             value={newNumber}\n             id={numberInputId}\n             onChange={handleChangeNumber}\n             /></label>\n             \n              \n            <button className={css.modalSubmitBtn} type=\"submit\"  >\n              Edit\n            </button>\n          </form>\n        </div>\n      </div>)\n  \n}\nexport default UpdateForm","\nimport * as React from 'react';\nimport {TiEdit} from 'react-icons/ti';\nimport Typography from '@mui/material/Typography';\nimport Modal from '@mui/material/Modal';\nimport UpdateForm from 'components/UpdateForm/UpdateForm';\nimport Box from '@mui/material/Box';\n\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 400,\n    bgcolor: 'background.paper',\nborderRadius:'5px',\n    boxShadow: '1px 7px 14px 0px rgba(0, 0, 0, 0.6)',\n    p: 4,\n    color: '66a5ad'\n\n  \n  \n  };\n  \n\nexport default function ModalUpdate({contactId}){\nconst [open, setOpen]=React.useState(false)\nconst handleOpen=()=>setOpen(true)\nconst handleClose=()=>setOpen(false)\n\nreturn(\n    <div>\n        <button onClick={handleOpen} type='button'><TiEdit /></button>\n        <Modal\n  open={open}\n  onClose={handleClose}\n  aria-labelledby=\"modal-modal-title\"\n  aria-describedby=\"modal-modal-description\"\n>\n  <Box sx={style}>\n    <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n    Update contact\n    </Typography>\n    <UpdateForm onClose={handleClose} contactId={contactId}/>\n  </Box>\n</Modal>\n    </div>\n)\n}\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Confirm } from 'notiflix/build/notiflix-confirm-aio';\nimport css from './ContactList.module.css';\nimport { useDispatch} from 'react-redux';\nimport { deleteContact } from '../../redux/operations';\nimport SortedBtns from '../../components/sortedBtn/sortedBtn';\nimport { UseContact } from 'hooks/useContact';\nimport ModalUpdate from 'components/ModalWindow/ModalWindow';\nimport IconButton from '@mui/material/IconButton';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nconst ContactList = () => {\n  const dispatch=useDispatch()\n  const { visibleContacts } = UseContact();\n\n  const handleDelete = id => {\n    Confirm.show(\n      'Notiflix Confirm',\n      'Do you want delete this contact?',\n      'Yes',\n      'No',\n      () => {\n        dispatch(deleteContact(id));\n      }\n    );\n  };\n  return (\n    <div className={css.contactContainer}>\n      {' '}\n      <h2 className={css.contactsTitle}>Contacts</h2>\n      <SortedBtns />\n      <ul className={css.contactList}>\n        {visibleContacts.map(({ id, name, number }) => (\n          <li key={id} className={css.contactItem}>\n            {name}: {number}\n            <ModalUpdate contactId={id} />\n            <div> \n            \n            <IconButton aria-label=\"delete\">\n            <DeleteIcon onClick={() => handleDelete(id)}/>\n          </IconButton>\n            </div>\n        \n\n          </li>\n        ))}\n        {visibleContacts.length === 0 && (\n          <p>The Phonebook is empty. Add your first contact. 🫤 </p>\n        )}\n      </ul>\n    </div>\n  );\n};\nexport default ContactList;\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoader,\n  selectSortedAlphabetic,\n  selectRecentlyAdded,\n  selectVisibleContacts\n\n} from '../redux/contact/selector';\n\nexport const UseContact = () => {\n  const contacts = useSelector(selectContacts);\n  const error = useSelector(selectError);\n  const isLoader = useSelector(selectIsLoader);\n  const sortedAlphabetic = useSelector(selectSortedAlphabetic);\n  const recentlyAdded = useSelector(selectRecentlyAdded);\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return { contacts, error, isLoader, sortedAlphabetic, recentlyAdded,visibleContacts };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__e1yzW\",\"formLabel\":\"Form_formLabel__alHO0\",\"formInput\":\"Form_formInput__sgOCo\",\"formTittle\":\"Form_formTittle__1hGkz\",\"addContactBtn\":\"Form_addContactBtn__ADaR4\"};","import { nanoid } from 'nanoid';\nimport { Notify } from 'notiflix';\nimport css from './Form.module.css';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/contact/selector';\nimport { addContact } from '../../redux/operations';\nconst Form = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const [contactName, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (contacts.some(({ name }) => name === contactName)) {\n      Notify.failure(`${contactName} is already in your contacts`);\n      return;\n    }\n    dispatch(\n      addContact({\n        name: contactName,\n        number,\n        id: nanoid(),\n      })\n    );\n    setName('');\n    setNumber('');\n  };\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <h2 className={css.formTittle}>Your Phonebook</h2>\n      <label className={css.formLabel} htmlFor={nameInputId}>\n        <input\n          className={css.formInput}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Name\"\n          value={contactName}\n          onChange={handleChange}\n          id={nameInputId}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label className={css.formLabel} htmlFor={numberInputId}>\n        <input\n          className={css.formInput}\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"+38\"\n          value={number}\n          onChange={handleChange}\n          id={numberInputId}\n          pattern=\"[0-9]{3}[0-9]{3}[0-9]{2}[0-9]{2}\"\n          title=\"Format phone number 0123456789\"\n          required\n        />\n      </label>\n      <button className={css.addContactBtn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\nexport default Form;\n","// extracted by mini-css-extract-plugin\nexport default {\"formLabel\":\"Filter_formLabel__Ozoh5\",\"contactLabel\":\"Filter_contactLabel__TqLYf\",\"filterTittle\":\"Filter_filterTittle__f0yzZ\",\"contactInput\":\"Filter_contactInput__YRet6\"};","export const selectFilter = state => state.filter;\n","import React from 'react';\nimport css from './Filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from '../../redux/filter/selector';\nimport { setFilter } from '../../redux/filter/filterSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const onChangeFilter = e => {\n    dispatch(setFilter(e.target.value));\n  };\n  return (\n    <form className={css.form}>\n      <label className={css.formLabel}>\n        <h2 className={css.filterTittle}>Find contacts by name</h2>\n        <input\n          type=\"text\"\n          value={filter}\n          name={filter}\n          placeholder=\"Enter phone number to find\"\n          onChange={onChangeFilter}\n          className={css.contactInput}\n        />\n      </label>\n    </form>\n  );\n};\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Contacts_section__lhdxY\"};","import ContactList from '../../src/components/ContactList/ContactList';\nimport Form from '../../src/components/Form/Form';\nimport Filter from '../../src/components/Filter/Filter';\nimport { fetchContacts } from '../redux/operations';\nimport { selectError, selectIsLoader } from '../redux/contact/selector';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport css from './Contacts.module.css';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoader);\n  const error = useSelector(selectError);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div\n      className={css.section}\n    >\n      <Form />\n      <title>Contacts</title>\n      {isLoading && !error && <b>Loading...</b>}\n      <ContactList />\n      <Filter />\n\n    </div>\n  );\n}\n"],"names":["dispatch","useDispatch","className","css","onClick","sortByName","sortByAdded","selectContacts","state","contacts","items","selectError","error","selectIsLoader","isLoader","selectSortedAlphabetic","sortedAlphabetic","selectRecentlyAdded","recentlyAdded","selectVisibleContacts","createSelector","filter","filterValue","contact","name","toLowerCase","includes","onClose","contactId","currentContact","useSelector","find","el","id","useState","newName","setNewName","number","newNumber","setNewNumber","handleClose","nameInputId","nanoid","numberInputId","onSubmit","e","preventDefault","updateContact","type","htmlFor","pattern","title","required","placeholder","value","onChange","currentTarget","style","position","top","left","transform","width","bgcolor","borderRadius","boxShadow","p","color","ModalUpdate","React","open","setOpen","Modal","Box","sx","Typography","variant","component","visibleContacts","map","IconButton","Delete","Confirm","deleteContact","handleDelete","length","contactName","setName","setNumber","handleChange","some","Notify","addContact","selectFilter","setFilter","target","Contacts","isLoading","useEffect","fetchContacts"],"sourceRoot":""}